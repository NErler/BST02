---
title: 'Say Hello!'
subtitle: 'The function `paste()`'
output: 
  html_document:
    code_folding: show
    df_print: paged
    toc: true
    toc_float:
      collapsed: false
    number_sections: false
    theme: spacelab
    highlight: tango
    includes:
      after_body: ../footerNE.html
    css: ../style.css
---

```{r, echo = FALSE, purl = FALSE}
library(knitr)

knit_hooks$set(purl = hook_purl)

options(purl = FALSE)

opts_chunk$set(purl = FALSE)
```

```{r, include = FALSE}
opts_hooks$set(eval = function(opt) {
  if (any(opt$exercise))
    opt$eval <- opt$include <- FALSE
  
  opt
})


static <- TRUE

options(width = 100)

hint <- function(text) {
  id <- paste0('hint_', sample.int(1e10, size = 1))
    cat(
    paste0('\n',
      '<button type="button" class="btn btn-info btn-sm" data-toggle="collapse" ',
      'data-target="#', id, '">Hint</button>',
      '<div id = "', id, '" class="collapse" style="border:1px; ',
      'border-style:solid; padding: 1em; border-color:#1F78B4">',
      text, '</div>')
  )
}
```


## Preface {data-progressive=FALSE}
### R packages
In this practical, a number of R packages are used.
The packages used (with versions that were used to generate the solutions) are:

* `r R.version.string`
* `mice` (version: `r packageVersion("mice")`)
* (not essential) `JointAI` (version: `r packageVersion("JointAI")`)


### Dataset 

For this practical, we will use the **NHANES2** dataset, a subset of the data we
have seen in the lecture slides.

To load this dataset, you can use the command `file.choose()` which opens the
explorer and allows you to navigate to the location of the file
`NHANES2_for_practicals.RData` on your computer.
If you know the path to the file, you can also use `load("<path>/NHANES2_for_practicals.RData")`.
RStudio users can also just click on the file in the "Files" pane/tab to load
it.

## Preparing for imputation
### Set-up run {.tabset .tabset-fade .tabset-pills}
Imputation needs to be tailored to the dataset at hand and, hence, using
the function `mice()` well requires several arguments to be specified.
To make the specification easier it is useful to do a dry-run which will
create the default versions of everything that needs to be specified. 

These default settings can then be adapted to our data.

```{r, eval = static, echo = FALSE}
asis_output("#### Task\\n")
```

```{r, eval = static, echo = FALSE}
asis_output('<div style="border:2px; border-style:solid; padding: 1em; border-color:#446E9B">')
```

Do the set-up run of `mice()` with the NHANES2 data without any iterations (`maxit = 0`).

```{r, eval = static, echo = FALSE}
asis_output("</div>")

asis_output("#### Solution\\n")
```

```{r imp0-solution, solution = TRUE}
# Note: This command will not produce any output.
```


## A first function
```{r}
hello <- function(name) {
  paste0("Hello ", name, ", how are you?")
}

hello("Nicole")
```


The function `paste()` seems to concatenate / combine strings.
Let's check out the help file for `paste()`:

```{r, eval = FALSE}
?paste
```

`paste()` has arguments
 
* `...`: one or more R objects, to be converted to character vectors. 
* `sep`: a character string to separate the terms. Not NA_character_.
* `collapse`: an optional character string to separate the results. Not NA_character_.

The help file also tells us that
`paste0(..., collapse)` is equivalent to `paste(..., sep = "", collapse)`.

### Let's experiment with this a bit 
Note: to experiment with the content of our own function it can be convenient
to set the arguments of our function to a value:
```{r}
name <- "Nicole"
paste0("Hello ", name, ", how are you?") # same as above
paste("Hello ", name, ", how are you?") # use paste instead of paste0 
```
Notice the extra spaces between the text and `name`?

```{r}
paste("Hello ", name, ", how are you?", sep = "")
```
Setting `sep = ""` indeed gives us is the same as `paste0`!

We can also `paste` vectors. Note the difference:
```{r}
paste(c("I", "am", "a", "vector", "of", "character", "strings")) # (sentence 1)
paste("We", "are", "several", "character", "strings")            # (sentence 2)
```

We can use this to explore the effect of the arguments `sep` and `collapse`:
```{r}
paste(c("I", "am", "a", "vector", "of", "character", "strings"), sep = "+++")
paste(c("I", "am", "a", "vector", "of", "character", "strings"), collapse = "---")

paste("We", "are", "several", "character", "strings", sep = "+++")
paste("We", "are", "several", "character", "strings", collapse = "---")
```


* `sep` separates the different objects. 
   Because the vector `c(...)` is one object it didn't have effect in sentence 1,
   Sentence 2 has multiple objects (each word is a separate object).
* `collapse` separates the terms (elements) of an object.
   This is why it has an effect in sentence 1 (each word is an element of the vector)
   but not in sentence 2 (each word is only one object).
   
This is what was written in the help file!
 
BTW: `paste()` does not only work for character strings:
```{r}
paste(c(1, 2, "abc"), 345, sep = " a word ", collapse = " / ")
```

 
**What should I have learned from this?**
 
* Read the help files! They (usually) explain how things work!
* Play around with the options / arguments to figure out how things work if you
  don't immediately understand the help file.
 
### Write your own function
Now that we understand `sep` and `collapse`, can you write a function that
can greet two people at the same time?


```{r}
hello2 <- function(name1, name2) {
  paste0("Hello ", name1, " and ", name2, ", how are you?")
}

hello2("Elrozy", "Nicole")
```

What about a function that can greet any number of people?
```{r}
hello_any <- function(names) {
  paste0("Hello ", 
         paste(names, collapse = ", "),
         ", how are you?")
}

hello_any(c("Elrozy", "Nicole"))
hello_any(c("Elrozy", "Nicole", "Anton", 'Daniel'))

hello_any("Elrozy")
```

**What happens when we give this input to our previous functions?**

#+ error = TRUE
```{r error = TRUE}
hello(c("Elrozy", "Nicole", "Anton", 'Daniel'))
hello2("Elrozy")
hello2(c("Elrozy", "Nicole", "Anton", 'Daniel'))
```


**What should I have learned from this?**
 
 * Better knowledge of the use of `paste()`, of course.
 * When you write functions, think about what the possible input might be.
 * Try your function with different possible inputs.
 * It can be useful to write functions general enough to handle different
   input.
